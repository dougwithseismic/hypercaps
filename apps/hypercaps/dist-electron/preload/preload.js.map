{"version":3,"file":"preload.js","sources":["../../electron/preload.ts"],"sourcesContent":["import { contextBridge, ipcRenderer } from \"electron\";\r\nimport { AppState } from \"./services/store/types/app-state\";\r\nimport { HyperKeyFeatureConfig } from \"./features/hyperkeys/types/hyperkey-feature\";\r\nimport type { IPCCommand } from \"./services/ipc/types\";\r\n\r\n// Expose protected methods that allow the renderer process to use\r\n// the ipcRenderer without exposing the entire object\r\ncontextBridge.exposeInMainWorld(\"api\", {\r\n  // Window controls\r\n  minimizeWindow: () => {\r\n    ipcRenderer.send(\"minimize-window\");\r\n  },\r\n  closeWindow: () => {\r\n    ipcRenderer.send(\"close-window\");\r\n  },\r\n\r\n  // Custom IPC Bridge\r\n  ipc: {\r\n    // Command handling\r\n    run: async <TParams = unknown, TResult = unknown>(\r\n      command: IPCCommand<TParams>\r\n    ): Promise<TResult> => {\r\n      console.log(\"[Preload] Running command:\", command);\r\n      const result = await ipcRenderer.invoke(\"ipc:command\", command);\r\n      console.log(\"[Preload] Command result:\", result);\r\n      return result as TResult;\r\n    },\r\n\r\n    // Event handling\r\n    on: <TData = unknown>(\r\n      service: string,\r\n      event: string,\r\n      callback: (data: TData) => void\r\n    ) => {\r\n      console.log(\"[Preload] Setting up event listener:\", service, event);\r\n      const handler = (\r\n        _: unknown,\r\n        ipcEvent: { service: string; event: string; data: TData }\r\n      ) => {\r\n        console.log(\"[Preload] Received event:\", ipcEvent);\r\n        if (ipcEvent.service === service && ipcEvent.event === event) {\r\n          console.log(\"[Preload] Event matched, calling callback\");\r\n          callback(ipcEvent.data);\r\n        }\r\n      };\r\n      ipcRenderer.on(\"ipc:event\", handler);\r\n      return () => {\r\n        console.log(\"[Preload] Removing event listener:\", service, event);\r\n        ipcRenderer.removeListener(\"ipc:event\", handler);\r\n      };\r\n    },\r\n  },\r\n\r\n  // HyperKey feature\r\n  getHyperKeyConfig: async () => {\r\n    return ipcRenderer.invoke(\"get-hyperkey-config\");\r\n  },\r\n  setHyperKeyConfig: async (config: HyperKeyFeatureConfig) => {\r\n    return ipcRenderer.invoke(\"set-hyperkey-config\", config);\r\n  },\r\n\r\n  // App settings\r\n  getStartupSettings: async () => {\r\n    return ipcRenderer.invoke(\"get-startup-settings\");\r\n  },\r\n  setStartupOnBoot: async (enabled: boolean) => {\r\n    return ipcRenderer.invoke(\"set-startup-on-boot\", enabled);\r\n  },\r\n  setStartMinimized: async (enabled: boolean) => {\r\n    return ipcRenderer.invoke(\"set-start-minimized\", enabled);\r\n  },\r\n\r\n  // Store state\r\n  getFullState: async () => {\r\n    return ipcRenderer.invoke(\"get-full-state\") as Promise<AppState>;\r\n  },\r\n});\r\n"],"names":["contextBridge","ipcRenderer","command","result","service","event","callback","handler","_","ipcEvent","config","enabled"],"mappings":"yCAOAA,EAAAA,cAAc,kBAAkB,MAAO,CAErC,eAAgB,IAAM,CACpBC,EAAA,YAAY,KAAK,iBAAiB,CACpC,EACA,YAAa,IAAM,CACjBA,EAAA,YAAY,KAAK,cAAc,CACjC,EAGA,IAAK,CAEH,IAAK,MACHC,GACqB,CACb,QAAA,IAAI,6BAA8BA,CAAO,EACjD,MAAMC,EAAS,MAAMF,EAAAA,YAAY,OAAO,cAAeC,CAAO,EACtD,eAAA,IAAI,4BAA6BC,CAAM,EACxCA,CACT,EAGA,GAAI,CACFC,EACAC,EACAC,IACG,CACK,QAAA,IAAI,uCAAwCF,EAASC,CAAK,EAC5D,MAAAE,EAAU,CACdC,EACAC,IACG,CACK,QAAA,IAAI,4BAA6BA,CAAQ,EAC7CA,EAAS,UAAYL,GAAWK,EAAS,QAAUJ,IACrD,QAAQ,IAAI,2CAA2C,EACvDC,EAASG,EAAS,IAAI,EAE1B,EACYR,OAAAA,cAAA,GAAG,YAAaM,CAAO,EAC5B,IAAM,CACH,QAAA,IAAI,qCAAsCH,EAASC,CAAK,EACpDJ,cAAA,eAAe,YAAaM,CAAO,CACjD,CAAA,CAEJ,EAGA,kBAAmB,SACVN,EAAA,YAAY,OAAO,qBAAqB,EAEjD,kBAAmB,MAAOS,GACjBT,cAAY,OAAO,sBAAuBS,CAAM,EAIzD,mBAAoB,SACXT,EAAA,YAAY,OAAO,sBAAsB,EAElD,iBAAkB,MAAOU,GAChBV,cAAY,OAAO,sBAAuBU,CAAO,EAE1D,kBAAmB,MAAOA,GACjBV,cAAY,OAAO,sBAAuBU,CAAO,EAI1D,aAAc,SACLV,EAAA,YAAY,OAAO,gBAAgB,CAE9C,CAAC"}