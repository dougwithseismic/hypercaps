{"version":3,"file":"preload.js","sources":["../../electron/preload.ts"],"sourcesContent":["import { contextBridge, ipcRenderer } from \"electron\";\n\n// Expose protected methods that allow the renderer process to use\n// the ipcRenderer without exposing the entire object\ncontextBridge.exposeInMainWorld(\"api\", {\n  startListening: async () => {\n    console.debug(\"[Preload] Checking service state before starting\");\n    const state = await ipcRenderer.invoke(\"get-keyboard-service-state\");\n    if (state) {\n      console.debug(\"[Preload] Service already running, skipping start\");\n      return;\n    }\n    console.debug(\"[Preload] Sending start-listening\");\n    ipcRenderer.send(\"start-listening\");\n  },\n  stopListening: () => {\n    console.debug(\"[Preload] Sending stop-listening\");\n    ipcRenderer.send(\"stop-listening\");\n  },\n  onKeyboardEvent: (callback: (event: any) => void) => {\n    console.debug(\"[Preload] Registering keyboard-event handler\");\n    ipcRenderer.on(\"keyboard-event\", (_, data) => {\n      console.debug(\"[Preload] Received keyboard-event\", data);\n      callback(data);\n    });\n  },\n  onKeyboardServiceState: (callback: (enabled: boolean) => void) => {\n    console.debug(\"[Preload] Registering keyboard-service-state handler\");\n    ipcRenderer.on(\"keyboard-service-state\", (_, enabled) => {\n      console.debug(\"[Preload] Received keyboard-service-state\", enabled);\n      callback(enabled);\n    });\n  },\n  onKeyboardServiceLoading: (callback: (loading: boolean) => void) => {\n    console.debug(\"[Preload] Registering keyboard-service-loading handler\");\n    ipcRenderer.on(\"keyboard-service-loading\", (_, loading) => {\n      console.debug(\"[Preload] Received keyboard-service-loading\", loading);\n      callback(loading);\n    });\n  },\n  getMappings: async () => {\n    console.debug(\"[Preload] Getting mappings\");\n    const mappings = await ipcRenderer.invoke(\"get-mappings\");\n    console.debug(\"[Preload] Retrieved mappings\", mappings);\n    return mappings;\n  },\n  addMapping: async (mapping: any) => {\n    console.debug(\"[Preload] Adding mapping\", mapping);\n    const result = await ipcRenderer.invoke(\"add-mapping\", mapping);\n    console.debug(\"[Preload] Added mapping result\", result);\n    return result;\n  },\n  updateMapping: async (id: string, updates: any) => {\n    console.debug(\"[Preload] Updating mapping\", { id, updates });\n    const result = await ipcRenderer.invoke(\"update-mapping\", id, updates);\n    console.debug(\"[Preload] Updated mapping result\", result);\n    return result;\n  },\n  deleteMapping: async (id: string) => {\n    console.debug(\"[Preload] Deleting mapping\", id);\n    const result = await ipcRenderer.invoke(\"delete-mapping\", id);\n    console.debug(\"[Preload] Deleted mapping result\", result);\n    return result;\n  },\n\n  // HyperKey config\n  getHyperKeyConfig: async () => {\n    console.debug(\"[Preload] Getting hyperkey config\");\n    const config = await ipcRenderer.invoke(\"get-hyperkey-config\");\n    console.debug(\"[Preload] Retrieved hyperkey config\", config);\n    return config;\n  },\n  setHyperKeyConfig: async (config: any) => {\n    console.debug(\"[Preload] Setting hyperkey config\", config);\n    const result = await ipcRenderer.invoke(\"set-hyperkey-config\", config);\n    console.debug(\"[Preload] Set hyperkey config result\", result);\n    return result;\n  },\n  restartWithConfig: async (config: any) => {\n    console.debug(\"[Preload] Restarting with config\", config);\n    const result = await ipcRenderer.invoke(\"restart-with-config\", config);\n    console.debug(\"[Preload] Restart with config result\", result);\n    return result;\n  },\n  onHyperKeyState: (callback: (config: any) => void) => {\n    console.debug(\"[Preload] Registering hyperkey-state handler\");\n    ipcRenderer.on(\"hyperkey-state\", (_, config) => {\n      console.debug(\"[Preload] Received hyperkey-state\", config);\n      callback(config);\n    });\n  },\n\n  // Startup settings\n  getStartupSettings: async () => {\n    console.debug(\"[Preload] Getting startup settings\");\n    const settings = await ipcRenderer.invoke(\"get-startup-settings\");\n    console.debug(\"[Preload] Retrieved startup settings\", settings);\n    return settings;\n  },\n  setStartupOnBoot: async (enabled: boolean) => {\n    console.debug(\"[Preload] Setting startup on boot\", enabled);\n    const result = await ipcRenderer.invoke(\"set-startup-on-boot\", enabled);\n    console.debug(\"[Preload] Set startup on boot result\", result);\n    return result;\n  },\n  setEnableOnStartup: async (enabled: boolean) => {\n    console.debug(\"[Preload] Setting enable on startup\", enabled);\n    const result = await ipcRenderer.invoke(\"set-enable-on-startup\", enabled);\n    console.debug(\"[Preload] Set enable on startup result\", result);\n    return result;\n  },\n\n  // Store state\n  getFullState: async () => {\n    console.debug(\"[Preload] Getting full state\");\n    const state = await ipcRenderer.invoke(\"get-full-state\");\n    console.debug(\"[Preload] Retrieved full state\", state);\n    return state;\n  },\n  onStoreStateUpdate: (callback: (state: any) => void) => {\n    console.debug(\"[Preload] Registering store-state-update handler\");\n    ipcRenderer.on(\"store-state-update\", (_, state) => {\n      console.debug(\"[Preload] Received store-state-update\", state);\n      callback(state);\n    });\n  },\n});\n\n// Expose window control methods\ncontextBridge.exposeInMainWorld(\"electron\", {\n  minimize: () => {\n    console.debug(\"[Preload] Minimizing window\");\n    ipcRenderer.send(\"minimize-window\");\n  },\n  close: () => {\n    console.debug(\"[Preload] Closing window\");\n    ipcRenderer.send(\"close-window\");\n  },\n});\n"],"names":["contextBridge","ipcRenderer"],"mappings":"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"}