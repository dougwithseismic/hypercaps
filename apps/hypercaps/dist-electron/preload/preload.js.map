{"version":3,"file":"preload.js","sources":["../../electron/preload.ts"],"sourcesContent":["import { contextBridge, ipcRenderer } from \"electron\";\nimport { AppState } from \"./services/store/types/app-state\";\nimport { HyperKeyFeatureConfig } from \"./features/hyperkeys/types/hyperkey-feature\";\nimport type { IPCCommand } from \"./services/ipc/types\";\n\n// Expose protected methods that allow the renderer process to use\n// the ipcRenderer without exposing the entire object\ncontextBridge.exposeInMainWorld(\"api\", {\n  // Window controls\n  minimizeWindow: () => {\n    ipcRenderer.send(\"minimize-window\");\n  },\n  closeWindow: () => {\n    ipcRenderer.send(\"close-window\");\n  },\n\n  // Custom IPC Bridge\n  ipc: {\n    // Command handling\n    run: async <TParams = unknown, TResult = unknown>(\n      command: IPCCommand<TParams>\n    ): Promise<TResult> => {\n      console.log(\"[Preload] Running command:\", command);\n      const result = await ipcRenderer.invoke(\"ipc:command\", command);\n      console.log(\"[Preload] Command result:\", result);\n      return result as TResult;\n    },\n\n    // Event handling\n    on: <TData = unknown>(\n      service: string,\n      event: string,\n      callback: (data: TData) => void\n    ) => {\n      console.log(\"[Preload] Setting up event listener:\", service, event);\n      const handler = (\n        _: unknown,\n        ipcEvent: { service: string; event: string; data: TData }\n      ) => {\n        console.log(\"[Preload] Received event:\", ipcEvent);\n        if (ipcEvent.service === service && ipcEvent.event === event) {\n          console.log(\"[Preload] Event matched, calling callback\");\n          callback(ipcEvent.data);\n        }\n      };\n      ipcRenderer.on(\"ipc:event\", handler);\n      return () => {\n        console.log(\"[Preload] Removing event listener:\", service, event);\n        ipcRenderer.removeListener(\"ipc:event\", handler);\n      };\n    },\n  },\n\n  // HyperKey feature\n  getHyperKeyConfig: async () => {\n    return ipcRenderer.invoke(\"get-hyperkey-config\");\n  },\n  setHyperKeyConfig: async (config: HyperKeyFeatureConfig) => {\n    return ipcRenderer.invoke(\"set-hyperkey-config\", config);\n  },\n\n  // App settings\n  getStartupSettings: async () => {\n    return ipcRenderer.invoke(\"get-startup-settings\");\n  },\n  setStartupOnBoot: async (enabled: boolean) => {\n    return ipcRenderer.invoke(\"set-startup-on-boot\", enabled);\n  },\n  setStartMinimized: async (enabled: boolean) => {\n    return ipcRenderer.invoke(\"set-start-minimized\", enabled);\n  },\n\n  // Store state\n  getFullState: async () => {\n    return ipcRenderer.invoke(\"get-full-state\") as Promise<AppState>;\n  },\n});\n"],"names":["contextBridge","ipcRenderer"],"mappings":";;AAOAA,SAAAA,cAAc,kBAAkB,OAAO;AAAA;AAAA,EAErC,gBAAgB,MAAM;AACpBC,aAAA,YAAY,KAAK,iBAAiB;AAAA,EACpC;AAAA,EACA,aAAa,MAAM;AACjBA,aAAA,YAAY,KAAK,cAAc;AAAA,EACjC;AAAA;AAAA,EAGA,KAAK;AAAA;AAAA,IAEH,KAAK,OACH,YACqB;AACb,cAAA,IAAI,8BAA8B,OAAO;AACjD,YAAM,SAAS,MAAMA,SAAAA,YAAY,OAAO,eAAe,OAAO;AACtD,cAAA,IAAI,6BAA6B,MAAM;AACxC,aAAA;AAAA,IACT;AAAA;AAAA,IAGA,IAAI,CACF,SACA,OACA,aACG;AACK,cAAA,IAAI,wCAAwC,SAAS,KAAK;AAC5D,YAAA,UAAU,CACd,GACA,aACG;AACK,gBAAA,IAAI,6BAA6B,QAAQ;AACjD,YAAI,SAAS,YAAY,WAAW,SAAS,UAAU,OAAO;AAC5D,kBAAQ,IAAI,2CAA2C;AACvD,mBAAS,SAAS,IAAI;AAAA,QAAA;AAAA,MAE1B;AACYA,2BAAA,GAAG,aAAa,OAAO;AACnC,aAAO,MAAM;AACH,gBAAA,IAAI,sCAAsC,SAAS,KAAK;AACpDA,6BAAA,eAAe,aAAa,OAAO;AAAA,MACjD;AAAA,IAAA;AAAA,EAEJ;AAAA;AAAA,EAGA,mBAAmB,YAAY;AACtB,WAAAA,SAAA,YAAY,OAAO,qBAAqB;AAAA,EACjD;AAAA,EACA,mBAAmB,OAAO,WAAkC;AACnD,WAAAA,qBAAY,OAAO,uBAAuB,MAAM;AAAA,EACzD;AAAA;AAAA,EAGA,oBAAoB,YAAY;AACvB,WAAAA,SAAA,YAAY,OAAO,sBAAsB;AAAA,EAClD;AAAA,EACA,kBAAkB,OAAO,YAAqB;AACrC,WAAAA,qBAAY,OAAO,uBAAuB,OAAO;AAAA,EAC1D;AAAA,EACA,mBAAmB,OAAO,YAAqB;AACtC,WAAAA,qBAAY,OAAO,uBAAuB,OAAO;AAAA,EAC1D;AAAA;AAAA,EAGA,cAAc,YAAY;AACjB,WAAAA,SAAA,YAAY,OAAO,gBAAgB;AAAA,EAAA;AAE9C,CAAC;"}