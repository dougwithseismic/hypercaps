{"version":3,"file":"preload.js","sources":["../../electron/preload.ts"],"sourcesContent":["import { IPCCommand } from '@hypercaps/ipc';\nimport { contextBridge, ipcRenderer } from 'electron';\n\n// Define the API interface\ninterface PreloadAPI {\n  minimizeWindow: () => void;\n  closeWindow: () => void;\n  ipc: {\n    run: <TParams = unknown, TResult = unknown>(\n      command: IPCCommand<TParams>\n    ) => Promise<TResult>;\n    on: <TData = unknown>(\n      service: string,\n      event: string,\n      callback: (data: TData) => void\n    ) => () => void;\n  };\n}\n\n// Create the API implementation\nconst api: PreloadAPI = {\n  // Window controls - keeping these simple operations direct\n  minimizeWindow: () => {\n    ipcRenderer.send('minimize-window');\n  },\n  closeWindow: () => {\n    ipcRenderer.send('close-window');\n  },\n\n  // Custom IPC Bridge\n  ipc: {\n    // Command handling\n    run: async <TParams = unknown, TResult = unknown>(\n      command: IPCCommand<TParams>\n    ): Promise<TResult> => {\n      console.log('[Preload] Running command:', command);\n      const result = await ipcRenderer.invoke('ipc:command', command);\n      console.log('[Preload] Command result:', result);\n      return result as TResult;\n    },\n\n    // Event handling\n    on: <TData = unknown>(\n      service: string,\n      event: string,\n      callback: (data: TData) => void\n    ) => {\n      console.log('[Preload] Setting up event listener:', service, event);\n      const handler = (\n        _: unknown,\n        ipcEvent: { service: string; event: string; data: TData }\n      ) => {\n        console.log('[Preload] Received event:', ipcEvent);\n        if (ipcEvent.service === service && ipcEvent.event === event) {\n          console.log('[Preload] Event matched, calling callback');\n          callback(ipcEvent.data);\n        }\n      };\n      ipcRenderer.on('ipc:event', handler);\n      return () => {\n        console.log('[Preload] Removing event listener:', service, event);\n        ipcRenderer.removeListener('ipc:event', handler);\n      };\n    },\n  },\n};\n\n// Expose the API to the renderer process\ncontextBridge.exposeInMainWorld('api', api);\n"],"names":["ipcRenderer","contextBridge"],"mappings":";;AAoBA,MAAM,MAAkB;AAAA;AAAA,EAEtB,gBAAgB,MAAM;AACpBA,aAAA,YAAY,KAAK,iBAAiB;AAAA,EACpC;AAAA,EACA,aAAa,MAAM;AACjBA,aAAA,YAAY,KAAK,cAAc;AAAA,EACjC;AAAA;AAAA,EAGA,KAAK;AAAA;AAAA,IAEH,KAAK,OACH,YACqB;AACb,cAAA,IAAI,8BAA8B,OAAO;AACjD,YAAM,SAAS,MAAMA,SAAAA,YAAY,OAAO,eAAe,OAAO;AACtD,cAAA,IAAI,6BAA6B,MAAM;AACxC,aAAA;AAAA,IACT;AAAA;AAAA,IAGA,IAAI,CACF,SACA,OACA,aACG;AACK,cAAA,IAAI,wCAAwC,SAAS,KAAK;AAC5D,YAAA,UAAU,CACd,GACA,aACG;AACK,gBAAA,IAAI,6BAA6B,QAAQ;AACjD,YAAI,SAAS,YAAY,WAAW,SAAS,UAAU,OAAO;AAC5D,kBAAQ,IAAI,2CAA2C;AACvD,mBAAS,SAAS,IAAI;AAAA,QAAA;AAAA,MAE1B;AACYA,2BAAA,GAAG,aAAa,OAAO;AACnC,aAAO,MAAM;AACH,gBAAA,IAAI,sCAAsC,SAAS,KAAK;AACpDA,6BAAA,eAAe,aAAa,OAAO;AAAA,MACjD;AAAA,IAAA;AAAA,EACF;AAEJ;AAGAC,SAAAA,cAAc,kBAAkB,OAAO,GAAG;"}