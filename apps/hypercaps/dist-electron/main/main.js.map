{"version":3,"file":"main.js","sources":["../../electron/services/store.ts","../../electron/services/keyboard.ts","../../electron/features/tray.ts","../../electron/main.ts"],"sourcesContent":["import { app } from \"electron\";\r\nimport path from \"path\";\r\nimport fs from \"fs/promises\";\r\n\r\ninterface KeyMapping {\r\n  id: string;\r\n  sourceKey: string;\r\n  targetModifiers: {\r\n    ctrl?: boolean;\r\n    alt?: boolean;\r\n    shift?: boolean;\r\n    win?: boolean;\r\n  };\r\n  targetKey?: string;\r\n  command?: string;\r\n  enabled: boolean;\r\n}\r\n\r\ninterface AppState {\r\n  mappings: KeyMapping[];\r\n  isEnabled: boolean;\r\n  startupOnBoot: boolean;\r\n  enableOnStartup: boolean;\r\n}\r\n\r\nexport class Store {\r\n  private static instance: Store;\r\n  private state: AppState;\r\n  private filePath: string;\r\n\r\n  private constructor() {\r\n    this.filePath = path.join(app.getPath(\"userData\"), \"state.json\");\r\n    this.state = {\r\n      mappings: [],\r\n      isEnabled: true,\r\n      startupOnBoot: false,\r\n      enableOnStartup: true,\r\n    };\r\n  }\r\n\r\n  public static getInstance(): Store {\r\n    if (!Store.instance) {\r\n      Store.instance = new Store();\r\n    }\r\n    return Store.instance;\r\n  }\r\n\r\n  public async load(): Promise<void> {\r\n    try {\r\n      const data = await fs.readFile(this.filePath, \"utf-8\");\r\n      this.state = JSON.parse(data);\r\n    } catch (error) {\r\n      // If file doesn't exist or is invalid, use default state\r\n      await this.save();\r\n    }\r\n  }\r\n\r\n  private async save(): Promise<void> {\r\n    try {\r\n      await fs.writeFile(this.filePath, JSON.stringify(this.state, null, 2));\r\n    } catch (error) {\r\n      console.error(\"Failed to save state:\", error);\r\n    }\r\n  }\r\n\r\n  // Mapping methods\r\n  public async getMappings(): Promise<KeyMapping[]> {\r\n    return this.state.mappings;\r\n  }\r\n\r\n  public async addMapping(\r\n    mapping: Omit<KeyMapping, \"id\">\r\n  ): Promise<KeyMapping> {\r\n    const newMapping = {\r\n      ...mapping,\r\n      id: Date.now().toString(),\r\n    };\r\n    this.state.mappings.push(newMapping);\r\n    await this.save();\r\n    return newMapping;\r\n  }\r\n\r\n  public async updateMapping(\r\n    id: string,\r\n    updates: Partial<KeyMapping>\r\n  ): Promise<KeyMapping> {\r\n    const index = this.state.mappings.findIndex((m) => m.id === id);\r\n    if (index === -1) {\r\n      throw new Error(\"Mapping not found\");\r\n    }\r\n\r\n    const updatedMapping = {\r\n      ...this.state.mappings[index],\r\n      ...updates,\r\n    };\r\n    this.state.mappings[index] = updatedMapping;\r\n    await this.save();\r\n    return updatedMapping;\r\n  }\r\n\r\n  public async deleteMapping(id: string): Promise<void> {\r\n    this.state.mappings = this.state.mappings.filter((m) => m.id !== id);\r\n    await this.save();\r\n  }\r\n\r\n  // Service state methods\r\n  public async getIsEnabled(): Promise<boolean> {\r\n    return this.state.isEnabled;\r\n  }\r\n\r\n  public async setIsEnabled(enabled: boolean): Promise<void> {\r\n    this.state.isEnabled = enabled;\r\n    await this.save();\r\n  }\r\n\r\n  // Startup settings methods\r\n  public async getStartupOnBoot(): Promise<boolean> {\r\n    return this.state.startupOnBoot;\r\n  }\r\n\r\n  public async setStartupOnBoot(enabled: boolean): Promise<void> {\r\n    this.state.startupOnBoot = enabled;\r\n    if (enabled) {\r\n      app.setLoginItemSettings({\r\n        openAtLogin: true,\r\n        path: app.getPath(\"exe\"),\r\n      });\r\n    } else {\r\n      app.setLoginItemSettings({\r\n        openAtLogin: false,\r\n      });\r\n    }\r\n    await this.save();\r\n  }\r\n\r\n  public async getEnableOnStartup(): Promise<boolean> {\r\n    return this.state.enableOnStartup;\r\n  }\r\n\r\n  public async setEnableOnStartup(enabled: boolean): Promise<void> {\r\n    this.state.enableOnStartup = enabled;\r\n    await this.save();\r\n  }\r\n}\r\n","import { BrowserWindow, dialog } from \"electron\";\nimport { spawn, ChildProcess } from \"child_process\";\nimport path from \"path\";\nimport { Store } from \"./store\";\n\ninterface KeyMapping {\n  id: string;\n  sourceKey: string;\n  targetModifiers: {\n    ctrl?: boolean;\n    alt?: boolean;\n    shift?: boolean;\n    win?: boolean;\n  };\n  targetKey?: string;\n  command?: string;\n  enabled: boolean;\n}\n\nexport class KeyboardService {\n  private mainWindow: BrowserWindow | null = null;\n  private keyboardProcess: ChildProcess | null = null;\n  private store: Store;\n  private startupTimeout: NodeJS.Timeout | null = null;\n  private isStarting: boolean = false;\n\n  constructor() {\n    this.store = Store.getInstance();\n  }\n\n  public async init(): Promise<void> {\n    await this.store.load();\n    const isEnabled = await this.store.getIsEnabled();\n    this.mainWindow?.webContents.send(\"keyboard-service-state\", isEnabled);\n    if (isEnabled) {\n      await this.startListening();\n    }\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n\n  public async startListening(): Promise<void> {\n    if (this.keyboardProcess || this.isStarting) {\n      return;\n    }\n\n    this.isStarting = true;\n    this.mainWindow?.webContents.send(\"keyboard-service-loading\", true);\n\n    const scriptPath =\n      process.env.NODE_ENV === \"development\"\n        ? path.resolve(process.cwd(), \"electron/scripts/keyboard-monitor.ps1\")\n        : path.resolve(__dirname, \"../scripts/keyboard-monitor.ps1\");\n\n    console.log(\"Starting keyboard monitor with script:\", scriptPath);\n\n    try {\n      this.keyboardProcess = spawn(\"powershell.exe\", [\n        \"-ExecutionPolicy\",\n        \"Bypass\",\n        \"-File\",\n        scriptPath,\n      ]);\n\n      // Set a timeout for startup\n      this.startupTimeout = setTimeout(() => {\n        if (this.isStarting) {\n          this.handleStartupFailure(\n            \"Keyboard monitor failed to start within timeout\"\n          );\n        }\n      }, 5000); // 5 second timeout\n\n      // Wait for first data or error\n      const startupPromise = new Promise<void>((resolve, reject) => {\n        const onFirstData = (data: Buffer) => {\n          this.clearStartupState();\n          this.handleKeyboardOutput(data);\n          resolve();\n        };\n\n        const onStartupError = (error: Buffer) => {\n          this.clearStartupState();\n          reject(new Error(error.toString()));\n        };\n\n        this.keyboardProcess?.stdout?.once(\"data\", onFirstData);\n        this.keyboardProcess?.stderr?.once(\"data\", onStartupError);\n\n        // Clean up startup listeners if process exits before first data\n        this.keyboardProcess?.once(\"close\", (code) => {\n          this.keyboardProcess?.stdout?.removeListener(\"data\", onFirstData);\n          this.keyboardProcess?.stderr?.removeListener(\"data\", onStartupError);\n          if (this.isStarting) {\n            reject(\n              new Error(`Process exited with code ${code} during startup`)\n            );\n          }\n        });\n      });\n\n      await startupPromise;\n\n      // Setup normal operation listeners\n      this.keyboardProcess.stdout?.on(\"data\", this.handleKeyboardOutput);\n      this.keyboardProcess.stderr?.on(\"data\", (data) => {\n        console.error(\"Keyboard monitor error:\", data.toString());\n      });\n\n      this.keyboardProcess.on(\"close\", (code) => {\n        console.log(\"Keyboard monitor process exited with code\", code);\n        this.clearStartupState();\n        this.keyboardProcess = null;\n        this.mainWindow?.webContents.send(\"keyboard-service-state\", false);\n      });\n\n      await this.store.setIsEnabled(true);\n      this.mainWindow?.webContents.send(\"keyboard-service-state\", true);\n    } catch (error) {\n      this.handleStartupFailure(\n        error instanceof Error ? error.message : \"Unknown error during startup\"\n      );\n    }\n  }\n\n  private clearStartupState(): void {\n    this.isStarting = false;\n    if (this.startupTimeout) {\n      clearTimeout(this.startupTimeout);\n      this.startupTimeout = null;\n    }\n    this.mainWindow?.webContents.send(\"keyboard-service-loading\", false);\n  }\n\n  private handleStartupFailure(message: string): void {\n    this.clearStartupState();\n    if (this.keyboardProcess) {\n      this.keyboardProcess.kill();\n      this.keyboardProcess = null;\n    }\n    dialog.showErrorBox(\n      \"Keyboard Monitor Error\",\n      `Failed to start keyboard monitor: ${message}`\n    );\n    this.mainWindow?.webContents.send(\"keyboard-service-state\", false);\n  }\n\n  public async stopListening(): Promise<void> {\n    if (this.keyboardProcess) {\n      this.keyboardProcess.stdout?.removeAllListeners();\n      this.keyboardProcess.stderr?.removeAllListeners();\n      this.keyboardProcess.removeAllListeners();\n\n      this.keyboardProcess.kill();\n      this.keyboardProcess = null;\n    }\n    await this.store.setIsEnabled(false);\n    this.mainWindow?.webContents.send(\"keyboard-service-state\", false);\n  }\n\n  public async getMappings(): Promise<KeyMapping[]> {\n    return this.store.getMappings();\n  }\n\n  public async addMapping(\n    mapping: Omit<KeyMapping, \"id\">\n  ): Promise<KeyMapping> {\n    return this.store.addMapping(mapping);\n  }\n\n  public async updateMapping(\n    id: string,\n    updates: Partial<KeyMapping>\n  ): Promise<KeyMapping> {\n    return this.store.updateMapping(id, updates);\n  }\n\n  public async deleteMapping(id: string): Promise<void> {\n    return this.store.deleteMapping(id);\n  }\n\n  private handleKeyboardOutput = (data: Buffer) => {\n    try {\n      const state = JSON.parse(data.toString());\n      this.mainWindow?.webContents.send(\"keyboard-event\", {\n        ctrlKey: Boolean(state.ctrl),\n        altKey: Boolean(state.alt),\n        shiftKey: Boolean(state.shift),\n        metaKey: Boolean(state.win),\n        capsLock: Boolean(state.caps),\n        pressedKeys: Array.isArray(state.pressedKeys) ? state.pressedKeys : [],\n        timestamp: Date.now(),\n      });\n    } catch (error) {\n      console.error(\"Error parsing keyboard state:\", error);\n    }\n  };\n\n  public dispose(): void {\n    this.stopListening();\n    this.mainWindow = null;\n  }\n}\n","import {\r\n  Tray,\r\n  Menu,\r\n  nativeImage,\r\n  BrowserWindow,\r\n  dialog,\r\n  globalShortcut,\r\n} from \"electron\";\r\nimport path from \"path\";\r\nimport { Store } from \"../services/store\";\r\nimport { KeyboardService } from \"../services/keyboard\";\r\n\r\nexport class TrayFeature {\r\n  private tray: Tray | null = null;\r\n  private mainWindow: BrowserWindow | null = null;\r\n  private keyboardService: KeyboardService | null = null;\r\n\r\n  constructor(mainWindow: BrowserWindow, keyboardService: KeyboardService) {\r\n    this.mainWindow = mainWindow;\r\n    this.keyboardService = keyboardService;\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    const icon = nativeImage\r\n      .createFromPath(path.join(__dirname, \"../../src/assets/tray-icon.png\"))\r\n      .resize({ width: 16, height: 16 });\r\n\r\n    this.tray = new Tray(icon);\r\n    this.tray.setToolTip(\"HyperCaps - Keyboard Remapping Tool\");\r\n\r\n    await this.setupTrayMenu();\r\n    this.registerGlobalShortcuts();\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  private async setupTrayMenu(): Promise<void> {\r\n    if (!this.tray) return;\r\n\r\n    const store = Store.getInstance();\r\n    const isEnabled = await store.getIsEnabled();\r\n    const startupOnBoot = await store.getStartupOnBoot();\r\n    const enableOnStartup = await store.getEnableOnStartup();\r\n\r\n    const contextMenu = Menu.buildFromTemplate([\r\n      {\r\n        label: \"HyperCaps\",\r\n        enabled: false,\r\n        icon: nativeImage\r\n          .createFromPath(\r\n            path.join(__dirname, \"../../src/assets/tray-icon.png\")\r\n          )\r\n          .resize({ width: 16, height: 16 }),\r\n      },\r\n      { type: \"separator\" },\r\n      {\r\n        label: \"Enable HyperCaps\",\r\n        type: \"checkbox\",\r\n        checked: isEnabled,\r\n        accelerator: \"CommandOrControl+Shift+E\",\r\n        click: (menuItem) => {\r\n          if (menuItem.checked) {\r\n            this.keyboardService?.startListening();\r\n          } else {\r\n            this.keyboardService?.stopListening();\r\n          }\r\n          this.mainWindow?.webContents.send(\r\n            \"keyboard-service-state\",\r\n            menuItem.checked\r\n          );\r\n        },\r\n      },\r\n      { type: \"separator\" },\r\n      {\r\n        label: \"Start with Windows\",\r\n        type: \"checkbox\",\r\n        checked: startupOnBoot,\r\n        click: async (menuItem) => {\r\n          await store.setStartupOnBoot(menuItem.checked);\r\n        },\r\n      },\r\n      {\r\n        label: \"Enable on Startup\",\r\n        type: \"checkbox\",\r\n        checked: enableOnStartup,\r\n        click: async (menuItem) => {\r\n          await store.setEnableOnStartup(menuItem.checked);\r\n        },\r\n      },\r\n      { type: \"separator\" },\r\n      {\r\n        label: \"Open Shortcut Manager\",\r\n        accelerator: \"CommandOrControl+Shift+S\",\r\n        click: () => {\r\n          this.showWindow();\r\n        },\r\n      },\r\n      { type: \"separator\" },\r\n      {\r\n        label: \"About HyperCaps\",\r\n        click: () => {\r\n          dialog.showMessageBox({\r\n            type: \"info\",\r\n            title: \"About HyperCaps\",\r\n            message: \"HyperCaps - Advanced Keyboard Remapping Tool\",\r\n            detail: \"Version 0.0.1\\nCreated for Windows power users.\",\r\n          });\r\n        },\r\n      },\r\n      { type: \"separator\" },\r\n      {\r\n        label: \"Quit HyperCaps\",\r\n        accelerator: \"CommandOrControl+Q\",\r\n        click: () => {\r\n          this.quit();\r\n        },\r\n      },\r\n    ]);\r\n\r\n    this.tray.setContextMenu(contextMenu);\r\n  }\r\n\r\n  private registerGlobalShortcuts(): void {\r\n    const ret = globalShortcut.register(\"CommandOrControl+Shift+S\", () => {\r\n      this.showWindow();\r\n    });\r\n\r\n    if (!ret) {\r\n      console.error(\"Failed to register global shortcut\");\r\n    }\r\n  }\r\n\r\n  private setupEventListeners(): void {\r\n    if (!this.tray) return;\r\n\r\n    this.tray.on(\"double-click\", () => {\r\n      this.showWindow();\r\n    });\r\n  }\r\n\r\n  private showWindow(): void {\r\n    this.mainWindow?.show();\r\n    this.mainWindow?.focus();\r\n  }\r\n\r\n  private quit(): void {\r\n    if (this.mainWindow) {\r\n      (this.mainWindow as any).isQuitting = true;\r\n    }\r\n    require(\"electron\").app.quit();\r\n  }\r\n\r\n  dispose(): void {\r\n    if (this.tray) {\r\n      this.tray.destroy();\r\n      this.tray = null;\r\n    }\r\n  }\r\n}\r\n","import { app, BrowserWindow, ipcMain, dialog, globalShortcut } from \"electron\";\nimport path from \"path\";\nimport { KeyboardService } from \"./services/keyboard\";\nimport { Store } from \"./services/store\";\nimport { TrayFeature } from \"./features/tray\";\n\n// Immediate environment logging\nconsole.log(\"=== Environment Debug ===\");\nconsole.log(\"NODE_ENV:\", process.env.NODE_ENV);\nconsole.log(\"isDev:\", process.env.NODE_ENV === \"development\");\nconsole.log(\"======================\");\n\n// Check platform - exit if not Windows\nif (process.platform !== \"win32\") {\n  dialog.showErrorBox(\n    \"Unsupported Platform\",\n    \"HyperCaps is only supported on Windows. The application will now exit.\"\n  );\n  app.quit();\n}\n\n// Handle creating/removing shortcuts on Windows when installing/uninstalling.\nif (require(\"electron-squirrel-startup\")) {\n  app.quit();\n}\n\nlet keyboardService: KeyboardService;\nlet trayFeature: TrayFeature | null = null;\nlet mainWindow: BrowserWindow | null = null;\n\nconst createWindow = () => {\n  console.log(\"Environment:\", process.env.NODE_ENV);\n\n  // Create the browser window.\n  mainWindow = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: path.join(__dirname, \"../preload/preload.js\"),\n    },\n    resizable: true,\n    minimizable: true,\n    maximizable: false,\n    fullscreenable: false,\n    // Round corners on Windows 11\n    roundedCorners: true,\n    backgroundMaterial: \"acrylic\",\n    darkTheme: true,\n    backgroundColor: \"#00000000\",\n  });\n\n  // Load appropriate content based on environment\n  if (process.env.NODE_ENV === \"development\") {\n    mainWindow.loadURL(\"http://localhost:5173\");\n    mainWindow.webContents.openDevTools();\n  } else {\n    // In production, load the built index.html file\n    mainWindow.loadFile(path.join(__dirname, \"../dist/index.html\"));\n  }\n\n  // Hide window instead of closing when user clicks X\n  mainWindow.on(\"close\", (event) => {\n    if (!(mainWindow as any).isQuitting) {\n      event.preventDefault();\n      mainWindow?.hide();\n      return false;\n    }\n  });\n\n  // Initialize keyboard service\n  try {\n    keyboardService = new KeyboardService();\n    keyboardService.setMainWindow(mainWindow);\n    keyboardService.init(); // Initialize and load state\n\n    // Setup IPC handlers\n    ipcMain.on(\"start-listening\", () => {\n      keyboardService.startListening();\n    });\n\n    ipcMain.on(\"stop-listening\", () => {\n      keyboardService.stopListening();\n    });\n\n    // Mapping handlers\n    ipcMain.handle(\"get-mappings\", () => {\n      return keyboardService.getMappings();\n    });\n\n    ipcMain.handle(\"add-mapping\", (event, mapping) => {\n      return keyboardService.addMapping(mapping);\n    });\n\n    ipcMain.handle(\"update-mapping\", (event, id, updates) => {\n      return keyboardService.updateMapping(id, updates);\n    });\n\n    ipcMain.handle(\"delete-mapping\", (event, id) => {\n      return keyboardService.deleteMapping(id);\n    });\n  } catch (error) {\n    dialog.showErrorBox(\n      \"Keyboard Service Error\",\n      \"Failed to initialize keyboard service. The application may not work as expected.\"\n    );\n  }\n};\n\n// Add window control handlers\nipcMain.on(\"minimize-window\", () => {\n  mainWindow?.minimize();\n});\n\nipcMain.on(\"close-window\", () => {\n  mainWindow?.hide();\n});\n\n// This method will be called when Electron has finished initialization\napp.whenReady().then(async () => {\n  const store = Store.getInstance();\n  await store.load(); // Load state before creating window\n\n  // Initialize startup state\n  const enableOnStartup = await store.getEnableOnStartup();\n  if (enableOnStartup) {\n    keyboardService?.startListening();\n  }\n\n  createWindow();\n\n  // Initialize tray feature\n  if (mainWindow && keyboardService) {\n    trayFeature = new TrayFeature(mainWindow, keyboardService);\n    await trayFeature.initialize();\n  }\n\n  // Setup startup settings IPC handlers\n  ipcMain.handle(\"get-startup-settings\", async () => {\n    return {\n      startupOnBoot: await store.getStartupOnBoot(),\n      enableOnStartup: await store.getEnableOnStartup(),\n    };\n  });\n\n  ipcMain.handle(\"set-startup-on-boot\", async (event, enabled: boolean) => {\n    await store.setStartupOnBoot(enabled);\n  });\n\n  ipcMain.handle(\"set-enable-on-startup\", async (event, enabled: boolean) => {\n    await store.setEnableOnStartup(enabled);\n  });\n});\n\n// Add proper cleanup\napp.on(\"before-quit\", () => {\n  if (keyboardService) {\n    keyboardService.dispose();\n  }\n  if (trayFeature) {\n    trayFeature.dispose();\n  }\n  globalShortcut.unregisterAll();\n});\n\n// Quit when all windows are closed, except on macOS\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n\napp.on(\"activate\", () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n"],"names":["app","spawn","_b","_a","_d","_c","dialog","mainWindow","keyboardService","nativeImage","Tray","Menu","globalShortcut","BrowserWindow","ipcMain"],"mappings":"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"}