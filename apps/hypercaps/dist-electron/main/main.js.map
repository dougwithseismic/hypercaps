{"version":3,"file":"main.js","sources":["../../electron/services/store.ts","../../electron/services/keyboard.ts","../../electron/features/tray.ts","../../electron/main.ts"],"sourcesContent":["import { app } from \"electron\";\nimport path from \"path\";\nimport fs from \"fs/promises\";\nimport { HyperKeyFeatureConfig, KeyMapping } from \"./types\";\n\ntype FeatureName = \"hyperKey\" | \"test\";\n\ninterface TestFeatureConfig {\n  testSetting: string;\n}\n\n// Set features\ntype FeatureConfig = {\n  hyperKey: HyperKeyFeatureConfig;\n  test: TestFeatureConfig;\n};\n\ninterface Feature<T extends FeatureName> {\n  name: T;\n  isEnabled: boolean;\n  config: FeatureConfig[T];\n}\n\nexport interface AppState {\n  mappings: KeyMapping[];\n  startupOnBoot: boolean;\n  enableOnStartup: boolean;\n  features: Feature<FeatureName>[];\n}\n\nexport class Store {\n  private static instance: Store;\n  private state: AppState;\n  private filePath: string;\n\n  private constructor() {\n    this.filePath = path.join(app.getPath(\"userData\"), \"state.json\");\n    this.state = {\n      mappings: [],\n      startupOnBoot: false,\n      enableOnStartup: true,\n      features: [\n        {\n          name: \"hyperKey\",\n          isEnabled: false,\n          config: {\n            isEnabled: true,\n            trigger: \"CapsLock\",\n            modifiers: [\"LShiftKey\"],\n          },\n        },\n      ],\n    };\n  }\n\n  public static getInstance(): Store {\n    if (!Store.instance) {\n      Store.instance = new Store();\n    }\n    return Store.instance;\n  }\n\n  public async load(): Promise<void> {\n    try {\n      const data = await fs.readFile(this.filePath, \"utf-8\");\n      const loadedState = JSON.parse(data);\n\n      // Migrate old hyperKeyConfig to feature system\n      if (\n        \"hyperKeyConfig\" in loadedState ||\n        \"isServiceEnabled\" in loadedState\n      ) {\n        loadedState.features = loadedState.features || [];\n\n        // Only migrate if hyperKey feature doesn't exist\n        if (\n          !loadedState.features.some(\n            (f: Feature<FeatureName>) => f.name === \"hyperKey\"\n          )\n        ) {\n          const isEnabled = loadedState.isServiceEnabled ?? false;\n          const config = loadedState.hyperKeyConfig ?? {\n            isEnabled,\n            trigger: \"CapsLock\",\n            modifiers: [\"LShiftKey\"],\n          };\n\n          loadedState.features.push({\n            name: \"hyperKey\",\n            isEnabled,\n            config: {\n              ...config,\n              isEnabled,\n            },\n          });\n        }\n\n        // Clean up old properties\n        delete loadedState.hyperKeyConfig;\n        delete loadedState.isServiceEnabled;\n      }\n\n      this.state = loadedState;\n    } catch (error) {\n      // If file doesn't exist or is invalid, use default state\n      await this.save();\n    }\n  }\n\n  private async save(): Promise<void> {\n    try {\n      await fs.writeFile(this.filePath, JSON.stringify(this.state, null, 2));\n    } catch (error) {\n      console.error(\"Failed to save state:\", error);\n    }\n  }\n\n  // Mapping methods\n  public async getMappings(): Promise<KeyMapping[]> {\n    return this.state.mappings;\n  }\n\n  public async addMapping(\n    mapping: Omit<KeyMapping, \"id\">\n  ): Promise<KeyMapping> {\n    const newMapping = {\n      ...mapping,\n      id: Date.now().toString(),\n    };\n    this.state.mappings.push(newMapping);\n    await this.save();\n    return newMapping;\n  }\n\n  public async updateMapping(\n    id: string,\n    updates: Partial<KeyMapping>\n  ): Promise<KeyMapping> {\n    const index = this.state.mappings.findIndex((m) => m.id === id);\n    if (index === -1) {\n      throw new Error(\"Mapping not found\");\n    }\n\n    const updatedMapping = {\n      ...this.state.mappings[index],\n      ...updates,\n    };\n    this.state.mappings[index] = updatedMapping;\n    await this.save();\n    return updatedMapping;\n  }\n\n  public async deleteMapping(id: string): Promise<void> {\n    this.state.mappings = this.state.mappings.filter((m) => m.id !== id);\n    await this.save();\n  }\n\n  // Feature management methods\n  public async getFeature<T extends FeatureName>(\n    name: T\n  ): Promise<Feature<T> | undefined> {\n    return this.state.features.find((f) => f.name === name) as Feature<T>;\n  }\n\n  public async updateFeature<T extends FeatureName>(\n    name: T,\n    updates: Partial<Feature<T>>\n  ): Promise<Feature<T>> {\n    const index = this.state.features.findIndex((f) => f.name === name);\n    if (index === -1) {\n      throw new Error(`Feature ${name} not found`);\n    }\n\n    const updatedFeature = {\n      ...this.state.features[index],\n      ...updates,\n    } as Feature<T>;\n\n    this.state.features[index] = updatedFeature;\n    await this.save();\n    return updatedFeature;\n  }\n\n  // HyperKey config methods\n  public async getHyperKeyConfig(): Promise<HyperKeyFeatureConfig> {\n    const hyperKeyFeature = this.state.features.find(\n      (f): f is Feature<\"hyperKey\"> => f.name === \"hyperKey\"\n    );\n    if (!hyperKeyFeature) {\n      // Create default config if not found\n      const defaultConfig: Feature<\"hyperKey\"> = {\n        name: \"hyperKey\",\n        isEnabled: false,\n        config: {\n          isEnabled: false,\n          trigger: \"CapsLock\",\n          modifiers: [\"LShiftKey\"],\n        },\n      };\n      this.state.features.push(defaultConfig);\n      await this.save();\n      return defaultConfig.config;\n    }\n    return hyperKeyFeature.config;\n  }\n\n  public async setHyperKeyConfig(config: HyperKeyFeatureConfig): Promise<void> {\n    const hyperKeyFeature = this.state.features.find(\n      (f): f is Feature<\"hyperKey\"> => f.name === \"hyperKey\"\n    );\n    if (hyperKeyFeature) {\n      hyperKeyFeature.config = config;\n      hyperKeyFeature.isEnabled = config.isEnabled;\n    } else {\n      this.state.features.push({\n        name: \"hyperKey\",\n        isEnabled: config.isEnabled,\n        config,\n      });\n    }\n    await this.save();\n  }\n\n  // Service state methods\n  public async getIsServiceEnabled(): Promise<boolean> {\n    const hyperKeyFeature = this.state.features.find(\n      (f): f is Feature<\"hyperKey\"> => f.name === \"hyperKey\"\n    );\n    return hyperKeyFeature?.isEnabled ?? false;\n  }\n\n  public async setIsServiceEnabled(enabled: boolean): Promise<void> {\n    const hyperKeyFeature = this.state.features.find(\n      (f): f is Feature<\"hyperKey\"> => f.name === \"hyperKey\"\n    );\n    if (hyperKeyFeature) {\n      hyperKeyFeature.isEnabled = enabled;\n      hyperKeyFeature.config.isEnabled = enabled;\n    }\n    await this.save();\n  }\n\n  // Startup settings methods\n  public async getStartupOnBoot(): Promise<boolean> {\n    return this.state.startupOnBoot;\n  }\n\n  public async setStartupOnBoot(enabled: boolean): Promise<void> {\n    this.state.startupOnBoot = enabled;\n    if (enabled) {\n      app.setLoginItemSettings({\n        openAtLogin: true,\n        path: app.getPath(\"exe\"),\n      });\n    } else {\n      app.setLoginItemSettings({\n        openAtLogin: false,\n      });\n    }\n    await this.save();\n  }\n\n  public async getEnableOnStartup(): Promise<boolean> {\n    return this.state.enableOnStartup;\n  }\n\n  public async setEnableOnStartup(enabled: boolean): Promise<void> {\n    this.state.enableOnStartup = enabled;\n    await this.save();\n  }\n\n  // Get full store state\n  public async getFullState(): Promise<AppState> {\n    return { ...this.state };\n  }\n}\n","import { BrowserWindow, dialog } from \"electron\";\nimport { spawn, ChildProcess } from \"child_process\";\nimport path from \"path\";\nimport { Store } from \"./store\";\nimport { HyperKeyFeatureConfig, KeyMapping } from \"./types\";\n\n// Import AppState from store\nimport type { AppState } from \"./store\";\n\nexport class KeyboardService {\n  private mainWindow: BrowserWindow | null = null;\n  private keyboardProcess: ChildProcess | null = null;\n  private store: Store;\n  private startupTimeout: NodeJS.Timeout | null = null;\n  private isStarting: boolean = false;\n\n  constructor() {\n    this.store = Store.getInstance();\n  }\n\n  public async init(): Promise<void> {\n    await this.store.load();\n    const hyperKeyFeature = await this.store.getFeature(\"hyperKey\");\n\n    if (!hyperKeyFeature) {\n      throw new Error(\"HyperKey feature not found\");\n    }\n\n    const isEnabled = hyperKeyFeature.isEnabled;\n    const hyperKeyConfig = hyperKeyFeature.config;\n\n    // Send states to renderer\n    this.mainWindow?.webContents.send(\"keyboard-service-state\", isEnabled);\n    this.mainWindow?.webContents.send(\"hyperkey-state\", {\n      ...hyperKeyConfig,\n      enabled: isEnabled,\n    });\n\n    // Send full state\n    await this.notifyStateUpdate();\n\n    if (isEnabled) {\n      await this.startListening();\n    }\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n\n  public async getFullState(): Promise<AppState> {\n    return this.store.getFullState();\n  }\n\n  private async notifyStateUpdate(): Promise<void> {\n    const fullState = await this.store.getFullState();\n    this.mainWindow?.webContents.send(\"store-state-update\", fullState);\n  }\n\n  public async startListening(): Promise<void> {\n    console.log(\"[KeyboardService] startListening() called\");\n\n    // If already running, just return\n    if (this.keyboardProcess) {\n      console.log(\"[KeyboardService] Process already running, returning early\");\n      return;\n    }\n\n    // If starting, wait for it to complete or fail\n    if (this.isStarting) {\n      console.log(\"[KeyboardService] Process already starting, waiting...\");\n      await new Promise<void>((resolve) => {\n        const checkInterval = setInterval(() => {\n          if (!this.isStarting) {\n            clearInterval(checkInterval);\n            resolve();\n          }\n        }, 100);\n      });\n      return;\n    }\n\n    this.isStarting = true;\n    console.log(\n      \"[KeyboardService] Setting isStarting flag and sending loading state\"\n    );\n    this.mainWindow?.webContents.send(\"keyboard-service-loading\", true);\n\n    const scriptPath =\n      process.env.NODE_ENV === \"development\"\n        ? path.resolve(process.cwd(), \"electron/scripts/keyboard-monitor.ps1\")\n        : path.resolve(__dirname, \"../scripts/keyboard-monitor.ps1\");\n\n    console.log(\"[KeyboardService] Using script path:\", scriptPath);\n    console.log(\"[KeyboardService] Current environment:\", process.env.NODE_ENV);\n\n    try {\n      // Kill any existing process first\n      if (this.keyboardProcess) {\n        this.keyboardProcess.kill();\n        this.keyboardProcess = null;\n      }\n\n      // Get hyperkey feature\n      const hyperKeyFeature = await this.store.getFeature(\"hyperKey\");\n      if (!hyperKeyFeature) {\n        throw new Error(\"Failed to get hyperkey feature\");\n      }\n\n      console.log(\n        \"[KeyboardService] Got hyperkey config:\",\n        hyperKeyFeature.config\n      );\n\n      // Convert trigger to proper case for Windows.Forms.Keys enum\n      const config = {\n        ...hyperKeyFeature.config,\n        enabled: hyperKeyFeature.isEnabled,\n        // Ensure modifiers is always an array\n        modifiers: Array.isArray(hyperKeyFeature.config.modifiers)\n          ? hyperKeyFeature.config.modifiers\n          : [],\n      };\n\n      console.log(\"[KeyboardService] Processed config:\", config);\n\n      // Create PowerShell command that sets config and runs script\n      const command = [\n        // First set the config\n        \"$Config = @{\",\n        `enabled=$${config.isEnabled.toString().toLowerCase()};`,\n        `trigger='${config.trigger}';`,\n        // Always create a PowerShell array, even if empty\n        `modifiers=@(${config.modifiers.map((m) => `'${m}'`).join(\",\") || \"@()\"});`,\n        `capsLockBehavior='${config.capsLockBehavior || \"BlockToggle\"}';`,\n        \"};\",\n        // Log the config for debugging\n        \"Write-Host 'Config:' $($Config | ConvertTo-Json -Depth 10);\",\n        // Then run the script\n        `& {`,\n        `  Set-Location '${path.dirname(scriptPath)}';`,\n        `  . '${scriptPath}'`,\n        `}`,\n      ].join(\" \");\n\n      console.log(\n        \"[KeyboardService] Spawning PowerShell process with config:\",\n        config,\n        \"\\nCommand:\",\n        command\n      );\n\n      this.keyboardProcess = spawn(\"powershell.exe\", [\n        \"-ExecutionPolicy\",\n        \"Bypass\",\n        \"-NoProfile\",\n        \"-NonInteractive\",\n        \"-Command\",\n        command,\n      ]);\n\n      console.log(\"[KeyboardService] Setting startup timeout\");\n      this.startupTimeout = setTimeout(() => {\n        if (this.isStarting) {\n          console.warn(\"[KeyboardService] Startup timeout reached (5s)\");\n          this.handleStartupFailure(\n            \"Keyboard monitor failed to start within timeout\"\n          );\n        }\n      }, 5000); // Reduced timeout to 5s\n\n      console.log(\"[KeyboardService] Creating startup promise\");\n      const startupPromise = new Promise<void>((resolve, reject) => {\n        const cleanup = () => {\n          if (this.keyboardProcess) {\n            this.keyboardProcess.stdout?.removeAllListeners();\n            this.keyboardProcess.stderr?.removeAllListeners();\n            this.keyboardProcess.removeAllListeners();\n          }\n        };\n\n        const onFirstData = (data: Buffer) => {\n          console.log(\n            \"[KeyboardService] Received first data:\",\n            data.toString().trim()\n          );\n          cleanup();\n          this.clearStartupState();\n          this.handleKeyboardOutput(data);\n          resolve();\n        };\n\n        const onStartupError = (error: Buffer) => {\n          console.error(\"[KeyboardService] Startup error:\", error.toString());\n          cleanup();\n          this.clearStartupState();\n          reject(new Error(error.toString()));\n        };\n\n        this.keyboardProcess?.stdout?.once(\"data\", onFirstData);\n        this.keyboardProcess?.stderr?.once(\"data\", onStartupError);\n\n        this.keyboardProcess?.once(\"close\", (code) => {\n          console.log(\n            \"[KeyboardService] Process closed during startup with code:\",\n            code\n          );\n          cleanup();\n          if (this.isStarting) {\n            reject(\n              new Error(`Process exited with code ${code} during startup`)\n            );\n          }\n        });\n      });\n\n      console.log(\"[KeyboardService] Awaiting startup promise\");\n      await startupPromise;\n\n      console.log(\"[KeyboardService] Setting up operation listeners\");\n      this.keyboardProcess.stdout?.on(\"data\", (data) => {\n        this.handleKeyboardOutput(data);\n      });\n\n      this.keyboardProcess.stderr?.on(\"data\", (data) => {\n        console.error(\"[KeyboardService] Runtime error:\", data.toString());\n      });\n\n      this.keyboardProcess.on(\"close\", (code) => {\n        console.log(\"[KeyboardService] Process closed with code:\", code);\n        this.clearStartupState();\n        this.keyboardProcess = null;\n        this.mainWindow?.webContents.send(\"keyboard-service-state\", false);\n      });\n\n      console.log(\"[KeyboardService] Updating store and sending success state\");\n      await this.store.setIsServiceEnabled(true);\n      this.mainWindow?.webContents.send(\"keyboard-service-state\", true);\n\n      await this.notifyStateUpdate();\n    } catch (error) {\n      console.error(\"[KeyboardService] Startup error:\", error);\n      this.handleStartupFailure(\n        error instanceof Error ? error.message : \"Unknown error during startup\"\n      );\n    }\n  }\n\n  private clearStartupState(): void {\n    this.isStarting = false;\n    if (this.startupTimeout) {\n      clearTimeout(this.startupTimeout);\n      this.startupTimeout = null;\n    }\n    this.mainWindow?.webContents.send(\"keyboard-service-loading\", false);\n  }\n\n  private handleStartupFailure(message: string): void {\n    this.clearStartupState();\n    if (this.keyboardProcess) {\n      this.keyboardProcess.kill();\n      this.keyboardProcess = null;\n    }\n    dialog.showErrorBox(\n      \"Keyboard Monitor Error\",\n      `Failed to start keyboard monitor: ${message}`\n    );\n    this.mainWindow?.webContents.send(\"keyboard-service-state\", false);\n  }\n\n  public async stopListening(): Promise<void> {\n    if (this.keyboardProcess) {\n      this.keyboardProcess.stdout?.removeAllListeners();\n      this.keyboardProcess.stderr?.removeAllListeners();\n      this.keyboardProcess.removeAllListeners();\n\n      this.keyboardProcess.kill();\n      this.keyboardProcess = null;\n    }\n    await this.store.setIsServiceEnabled(false);\n    this.mainWindow?.webContents.send(\"keyboard-service-state\", false);\n\n    await this.notifyStateUpdate();\n  }\n\n  public async getMappings(): Promise<KeyMapping[]> {\n    return this.store.getMappings();\n  }\n\n  public async addMapping(\n    mapping: Omit<KeyMapping, \"id\">\n  ): Promise<KeyMapping> {\n    const result = await this.store.addMapping(mapping);\n    await this.notifyStateUpdate();\n    return result;\n  }\n\n  public async updateMapping(\n    id: string,\n    updates: Partial<KeyMapping>\n  ): Promise<KeyMapping> {\n    const result = await this.store.updateMapping(id, updates);\n    await this.notifyStateUpdate();\n    return result;\n  }\n\n  public async deleteMapping(id: string): Promise<void> {\n    await this.store.deleteMapping(id);\n    await this.notifyStateUpdate();\n  }\n\n  private async executeCommand(command: string): Promise<void> {\n    try {\n      const { exec } = require(\"child_process\");\n      exec(command, (error: Error | null, stdout: string, stderr: string) => {\n        if (error) {\n          console.error(`[KeyboardService] Command execution error: ${error}`);\n          return;\n        }\n        if (stderr) {\n          console.error(`[KeyboardService] Command stderr: ${stderr}`);\n        }\n        if (stdout) {\n          console.log(`[KeyboardService] Command output: ${stdout}`);\n        }\n      });\n    } catch (error) {\n      console.error(\"[KeyboardService] Failed to execute command:\", error);\n    }\n  }\n\n  private async executeMapping(mapping: KeyMapping): Promise<void> {\n    try {\n      // Update metadata\n      const now = Date.now();\n      await this.store.updateMapping(mapping.id, {\n        metadata: {\n          ...mapping.metadata,\n          lastUsed: now,\n          useCount: (mapping.metadata?.useCount || 0) + 1,\n        },\n      });\n\n      // Execute based on action type\n      switch (mapping.actionType) {\n        case \"command\": {\n          const { exec } = require(\"child_process\");\n          const options: any = {\n            ...(mapping.options?.workingDirectory && {\n              cwd: mapping.options.workingDirectory,\n            }),\n            ...(mapping.options?.shell && { shell: mapping.options.shell }),\n          };\n\n          // For admin commands on Windows, prefix with runas\n          const cmd = mapping.options?.runAsAdmin\n            ? `powershell.exe Start-Process -Verb RunAs \"${mapping.action}\"`\n            : mapping.action;\n\n          if (mapping.options?.async) {\n            exec(cmd, options);\n          } else {\n            await new Promise((resolve, reject) => {\n              exec(\n                cmd,\n                options,\n                (error: Error | null, stdout: string, stderr: string) => {\n                  if (error) {\n                    console.error(\n                      `[KeyboardService] Command execution error:`,\n                      error\n                    );\n                    reject(error);\n                    return;\n                  }\n                  if (stderr) {\n                    console.error(`[KeyboardService] Command stderr:`, stderr);\n                  }\n                  if (stdout) {\n                    console.log(`[KeyboardService] Command output:`, stdout);\n                  }\n                  resolve(void 0);\n                }\n              );\n            });\n          }\n          break;\n        }\n\n        case \"script\": {\n          const { execFile } = require(\"child_process\");\n          const options: any = {\n            ...(mapping.options?.workingDirectory && {\n              cwd: mapping.options.workingDirectory,\n            }),\n          };\n\n          if (mapping.options?.async) {\n            execFile(mapping.action, [], options);\n          } else {\n            await new Promise((resolve, reject) => {\n              execFile(\n                mapping.action,\n                [],\n                options,\n                (error: Error | null, stdout: string, stderr: string) => {\n                  if (error) {\n                    console.error(\n                      `[KeyboardService] Script execution error:`,\n                      error\n                    );\n                    reject(error);\n                    return;\n                  }\n                  if (stderr) {\n                    console.error(`[KeyboardService] Script stderr:`, stderr);\n                  }\n                  if (stdout) {\n                    console.log(`[KeyboardService] Script output:`, stdout);\n                  }\n                  resolve(void 0);\n                }\n              );\n            });\n          }\n          break;\n        }\n\n        case \"shortcut\": {\n          // For keyboard shortcuts, we'll use @nut-tree/nut-js\n          const { keyboard, Key } = require(\"@nut-tree/nut-js\");\n\n          // Parse the shortcut string (e.g. \"control+shift+a\")\n          const keys = mapping.action.toLowerCase().split(\"+\");\n\n          // Press all modifier keys first\n          const modifierKeys = keys\n            .slice(0, -1)\n            .map((key) => {\n              switch (key) {\n                case \"control\":\n                case \"ctrl\":\n                  return Key.LeftControl;\n                case \"shift\":\n                  return Key.LeftShift;\n                case \"alt\":\n                  return Key.LeftAlt;\n                case \"command\":\n                case \"cmd\":\n                case \"win\":\n                  return Key.LeftWindows;\n                default:\n                  return null;\n              }\n            })\n            .filter((key) => key !== null);\n\n          // Press the final key\n          const finalKey = keys[keys.length - 1].toUpperCase();\n\n          // Press all keys together\n          await keyboard.pressKey(...modifierKeys, Key[finalKey]);\n          await keyboard.releaseKey(...modifierKeys, Key[finalKey]);\n          break;\n        }\n\n        default:\n          console.error(\n            `[KeyboardService] Unknown action type: ${(mapping as any).actionType}`\n          );\n      }\n    } catch (error) {\n      console.error(\"[KeyboardService] Failed to execute mapping:\", error);\n      dialog.showErrorBox(\n        \"Shortcut Error\",\n        `Failed to execute shortcut \"${mapping.name}\": ${error}`\n      );\n    }\n  }\n\n  private handleKeyboardOutput = (data: Buffer) => {\n    try {\n      const lines = data.toString().split(\"\\n\");\n      for (const line of lines) {\n        const trimmed = line.trim();\n        // Skip empty lines\n        if (!trimmed) continue;\n\n        // If line starts with '[DEBUG]', log it\n        if (trimmed.startsWith(\"[DEBUG]\")) {\n          console.log(trimmed);\n          continue;\n        }\n\n        // Parse JSON state updates\n        try {\n          const state = JSON.parse(trimmed);\n          console.log(\"[KeyboardService] Parsed state:\", state);\n\n          // Get current pressed keys\n          const pressedKeys = Array.isArray(state.pressedKeys)\n            ? state.pressedKeys\n            : [];\n\n          // Check mappings\n          this.store.getMappings().then((mappings) => {\n            for (const mapping of mappings) {\n              if (!mapping.enabled) continue;\n\n              // Check if all trigger keys are pressed\n              const allTriggersPressed = mapping.triggers.every((trigger) =>\n                pressedKeys.includes(trigger)\n              );\n\n              // If triggers match, execute the mapping\n              if (allTriggersPressed) {\n                console.log(\n                  `[KeyboardService] Executing mapping: ${mapping.name} (${mapping.id})`\n                );\n                this.executeMapping(mapping);\n              }\n            }\n          });\n\n          // Send keyboard event to renderer\n          this.mainWindow?.webContents.send(\"keyboard-event\", {\n            pressedKeys,\n            timestamp: Date.now(),\n          });\n        } catch (parseError) {\n          // Only log parsing errors for lines that look like JSON\n          if (trimmed.startsWith(\"{\") || trimmed.startsWith(\"[\")) {\n            console.error(\"Error parsing keyboard state:\", parseError);\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error handling keyboard output:\", error);\n    }\n  };\n\n  public dispose(): void {\n    this.stopListening();\n    this.mainWindow = null;\n  }\n\n  public async restartWithConfig(config: HyperKeyFeatureConfig): Promise<void> {\n    await this.store.updateFeature(\"hyperKey\", {\n      isEnabled: config.isEnabled,\n      config,\n    });\n    await this.stopListening();\n    await this.startListening();\n    await this.notifyStateUpdate();\n  }\n}\n","import {\r\n  Tray,\r\n  Menu,\r\n  nativeImage,\r\n  BrowserWindow,\r\n  dialog,\r\n  globalShortcut,\r\n} from \"electron\";\r\nimport path from \"path\";\r\nimport { Store } from \"../services/store\";\r\nimport { KeyboardService } from \"../services/keyboard\";\r\n\r\nexport class TrayFeature {\r\n  private tray: Tray | null = null;\r\n  private mainWindow: BrowserWindow | null = null;\r\n  private keyboardService: KeyboardService | null = null;\r\n\r\n  constructor(mainWindow: BrowserWindow, keyboardService: KeyboardService) {\r\n    this.mainWindow = mainWindow;\r\n    this.keyboardService = keyboardService;\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    const icon = nativeImage\r\n      .createFromPath(path.join(__dirname, \"../../src/assets/tray-icon.png\"))\r\n      .resize({ width: 16, height: 16 });\r\n\r\n    this.tray = new Tray(icon);\r\n    this.tray.setToolTip(\"HyperCaps - Keyboard Remapping Tool\");\r\n\r\n    await this.setupTrayMenu();\r\n    this.registerGlobalShortcuts();\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  private async setupTrayMenu(): Promise<void> {\r\n    if (!this.tray) return;\r\n\r\n    const store = Store.getInstance();\r\n    const isEnabled = await store.getIsServiceEnabled();\r\n    const startupOnBoot = await store.getStartupOnBoot();\r\n    const enableOnStartup = await store.getEnableOnStartup();\r\n\r\n    const contextMenu = Menu.buildFromTemplate([\r\n      {\r\n        label: \"HyperCaps\",\r\n        enabled: false,\r\n        icon: nativeImage\r\n          .createFromPath(\r\n            path.join(__dirname, \"../../src/assets/tray-icon.png\")\r\n          )\r\n          .resize({ width: 16, height: 16 }),\r\n      },\r\n      { type: \"separator\" },\r\n      {\r\n        label: \"Enable HyperCaps\",\r\n        type: \"checkbox\",\r\n        checked: isEnabled,\r\n        accelerator: \"CommandOrControl+Shift+E\",\r\n        click: (menuItem) => {\r\n          if (menuItem.checked) {\r\n            this.keyboardService?.startListening();\r\n          } else {\r\n            this.keyboardService?.stopListening();\r\n          }\r\n          this.mainWindow?.webContents.send(\r\n            \"keyboard-service-state\",\r\n            menuItem.checked\r\n          );\r\n        },\r\n      },\r\n      { type: \"separator\" },\r\n      {\r\n        label: \"Start with Windows\",\r\n        type: \"checkbox\",\r\n        checked: startupOnBoot,\r\n        click: async (menuItem) => {\r\n          await store.setStartupOnBoot(menuItem.checked);\r\n        },\r\n      },\r\n      {\r\n        label: \"Enable on Startup\",\r\n        type: \"checkbox\",\r\n        checked: enableOnStartup,\r\n        click: async (menuItem) => {\r\n          await store.setEnableOnStartup(menuItem.checked);\r\n        },\r\n      },\r\n      { type: \"separator\" },\r\n      {\r\n        label: \"Open Shortcut Manager\",\r\n        accelerator: \"CommandOrControl+Shift+S\",\r\n        click: () => {\r\n          this.showWindow();\r\n        },\r\n      },\r\n      { type: \"separator\" },\r\n      {\r\n        label: \"About HyperCaps\",\r\n        click: () => {\r\n          dialog.showMessageBox({\r\n            type: \"info\",\r\n            title: \"About HyperCaps\",\r\n            message: \"HyperCaps - Advanced Keyboard Remapping Tool\",\r\n            detail: \"Version 0.0.1\\nCreated for Windows power users.\",\r\n          });\r\n        },\r\n      },\r\n      { type: \"separator\" },\r\n      {\r\n        label: \"Quit HyperCaps\",\r\n        accelerator: \"CommandOrControl+Q\",\r\n        click: () => {\r\n          this.quit();\r\n        },\r\n      },\r\n    ]);\r\n\r\n    this.tray.setContextMenu(contextMenu);\r\n  }\r\n\r\n  private registerGlobalShortcuts(): void {\r\n    const ret = globalShortcut.register(\"CommandOrControl+Shift+S\", () => {\r\n      this.showWindow();\r\n    });\r\n\r\n    if (!ret) {\r\n      console.error(\"Failed to register global shortcut\");\r\n    }\r\n  }\r\n\r\n  private setupEventListeners(): void {\r\n    if (!this.tray) return;\r\n\r\n    this.tray.on(\"double-click\", () => {\r\n      this.showWindow();\r\n    });\r\n  }\r\n\r\n  private showWindow(): void {\r\n    this.mainWindow?.show();\r\n    this.mainWindow?.focus();\r\n  }\r\n\r\n  private quit(): void {\r\n    if (this.mainWindow) {\r\n      (this.mainWindow as any).isQuitting = true;\r\n    }\r\n    require(\"electron\").app.quit();\r\n  }\r\n\r\n  dispose(): void {\r\n    if (this.tray) {\r\n      this.tray.destroy();\r\n      this.tray = null;\r\n    }\r\n  }\r\n}\r\n","import { app, BrowserWindow, ipcMain, dialog, globalShortcut } from \"electron\";\nimport path from \"path\";\nimport { KeyboardService } from \"./services/keyboard\";\nimport { Store } from \"./services/store\";\nimport { TrayFeature } from \"./features/tray\";\n\n// Immediate environment logging\nconsole.log(\"=== Environment Debug ===\");\nconsole.log(\"NODE_ENV:\", process.env.NODE_ENV);\nconsole.log(\"isDev:\", process.env.NODE_ENV === \"development\");\nconsole.log(\"======================\");\n\n// Check platform - exit if not Windows\nif (process.platform !== \"win32\") {\n  dialog.showErrorBox(\n    \"Unsupported Platform\",\n    \"HyperCaps is only supported on Windows. The application will now exit.\"\n  );\n  app.quit();\n}\n\n// Handle creating/removing shortcuts on Windows when installing/uninstalling.\nif (require(\"electron-squirrel-startup\")) {\n  app.quit();\n}\n\nlet keyboardService: KeyboardService;\nlet trayFeature: TrayFeature | null = null;\nlet mainWindow: BrowserWindow | null = null;\n\nconst createWindow = async () => {\n  console.log(\"Environment:\", process.env.NODE_ENV);\n\n  // Create the browser window.\n  mainWindow = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: path.join(__dirname, \"../preload/preload.js\"),\n    },\n    resizable: true,\n    minimizable: true,\n    maximizable: false,\n    fullscreenable: false,\n    // Round corners on Windows 11\n    roundedCorners: true,\n    backgroundMaterial: \"acrylic\",\n    darkTheme: true,\n    backgroundColor: \"#00000000\",\n  });\n\n  // Setup IPC handlers\n  ipcMain.on(\"start-listening\", () => {\n    keyboardService?.startListening();\n  });\n\n  ipcMain.on(\"stop-listening\", () => {\n    keyboardService?.stopListening();\n  });\n\n  // Mapping handlers\n  ipcMain.handle(\"get-mappings\", () => {\n    return keyboardService?.getMappings();\n  });\n\n  ipcMain.handle(\"add-mapping\", (event, mapping) => {\n    return keyboardService?.addMapping(mapping);\n  });\n\n  ipcMain.handle(\"update-mapping\", (event, id, updates) => {\n    return keyboardService?.updateMapping(id, updates);\n  });\n\n  ipcMain.handle(\"delete-mapping\", (event, id) => {\n    return keyboardService?.deleteMapping(id);\n  });\n\n  // HyperKey config handlers\n  ipcMain.handle(\"get-hyperkey-config\", async () => {\n    const store = Store.getInstance();\n    return store.getHyperKeyConfig();\n  });\n\n  ipcMain.handle(\"set-hyperkey-config\", async (event, config) => {\n    const store = Store.getInstance();\n    await store.setHyperKeyConfig(config);\n    await keyboardService?.restartWithConfig(config);\n  });\n\n  // Load appropriate content based on environment\n  if (process.env.NODE_ENV === \"development\") {\n    mainWindow.loadURL(\"http://localhost:5173\");\n  } else {\n    // In production, load the built index.html file\n    mainWindow.loadFile(path.join(__dirname, \"../dist/index.html\"));\n  }\n\n  // Hide window instead of closing when user clicks X\n  mainWindow.on(\"close\", (event) => {\n    if (!(mainWindow as any).isQuitting) {\n      event.preventDefault();\n      mainWindow?.hide();\n      return false;\n    }\n  });\n};\n\n// Add window control handlers\nipcMain.on(\"minimize-window\", () => {\n  mainWindow?.minimize();\n});\n\nipcMain.on(\"close-window\", () => {\n  mainWindow?.hide();\n});\n\n// This method will be called when Electron has finished initialization\napp.whenReady().then(async () => {\n  const store = Store.getInstance();\n  await store.load(); // Load state before creating window\n\n  // Initialize keyboard service first\n  keyboardService = new KeyboardService();\n  await keyboardService.init(); // This will auto-start if enabled in settings\n\n  // Then create window\n  await createWindow();\n  if (mainWindow) {\n    keyboardService.setMainWindow(mainWindow);\n  }\n\n  // Initialize tray feature after window is created\n  if (mainWindow && keyboardService) {\n    trayFeature = new TrayFeature(mainWindow, keyboardService);\n    await trayFeature.initialize();\n  }\n\n  // Startup settings\n  ipcMain.handle(\"get-startup-settings\", async () => {\n    const startupOnBoot = await store.getStartupOnBoot();\n    const enableOnStartup = await store.getEnableOnStartup();\n    return { startupOnBoot, enableOnStartup };\n  });\n\n  ipcMain.handle(\"set-startup-on-boot\", async (_, enabled: boolean) => {\n    await store.setStartupOnBoot(enabled);\n  });\n\n  ipcMain.handle(\"set-enable-on-startup\", async (_, enabled: boolean) => {\n    await store.setEnableOnStartup(enabled);\n  });\n\n  // Store state\n  ipcMain.handle(\"get-full-state\", async () => {\n    return keyboardService.getFullState();\n  });\n\n  // Window controls\n  ipcMain.on(\"minimize-window\", () => {\n    mainWindow?.minimize();\n  });\n});\n\n// Add proper cleanup\napp.on(\"before-quit\", () => {\n  if (keyboardService) {\n    keyboardService.dispose();\n  }\n  if (trayFeature) {\n    trayFeature.dispose();\n  }\n  globalShortcut.unregisterAll();\n});\n\n// Quit when all windows are closed, except on macOS\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n\napp.on(\"activate\", () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n"],"names":["app","spawn","_a","_b","_d","_c","dialog","mainWindow","keyboardService","nativeImage","Tray","Menu","globalShortcut","BrowserWindow","ipcMain"],"mappings":"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"}